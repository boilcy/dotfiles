#!/bin/bash
# shellcheck disable=SC2317
if [[ -n "$ZSH_VERSION" ]]; then  # quit now if in zsh
    return 1 2> /dev/null || exit 1;
fi;

set_prompt(){

    local black="" blue="" bold="" cyan="" green="" orange="" purple="" red="" reset="" white="" yellow=""
    if [ -x /usr/bin/tput ] && tput setaf 1 &> /dev/null; then
        tput sgr0 # Reset colors

        bold=$(tput bold)
        reset=$(tput sgr0)

        # Solarized colors
        # (https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values)
        black=$(tput setaf 0)
        blue=$(tput setaf 33)
        cyan=$(tput setaf 37)
        green=$(tput setaf 190)
        orange=$(tput setaf 172)
        purple=$(tput setaf 141)
        red=$(tput setaf 124)
        violet=$(tput setaf 61)
        magenta=$(tput setaf 9)
        white=$(tput setaf 8)
        yellow=$(tput setaf 136)
    else
        # Colors
        cyan="\[\033[1;36m\]"
        yellow="\[\033[1;33m\]"
        green="\[\033[1;32m\]"
        blue="\[\033[1;34m\]"
        red="\[\033[1;31m\]"
        reset="\[\033[0m\]"
    fi

    # Git functions
    parse_git_branch() {
        # Check if current directory is inside a git repository
        if git rev-parse --is-inside-work-tree &>/dev/null; then
            # Get the current branch name
            branch=$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --always 2>/dev/null)
            
            # Check if there are staged changes
            if ! git diff --cached --quiet; then
            echo "($branch*)"
            else
            echo "($branch)"
            fi
        fi
    }

    # Python virtual environment
    python_venv() {
        [[ $VIRTUAL_ENV != "" ]] && echo "($(basename "$VIRTUAL_ENV")) "
    }

    # Only show username/host if not default
    user_host() {
        userhost=""
        userhost+="\[${green}\]$USER\[${reset}\]"
        userhost+="@$HOSTNAME"

        #if [ $USER != "$default_username" ]; then echo $userhost ""; fi
        echo -e "$userhost"
    }

    # Function to shorten path
    shorten_path() {
        local path="${1/#$HOME/\~}"
        local IFS='/'
        local shortened=()
        read -ra parts <<< "$path"
        for ((i=0; i<${#parts[@]}-1; i++)); do
            if [[ ${parts[i]} == .* ]]; then
                shortened+=("${parts[i]}")
            else
                shortened+=("${parts[i]:0:1}")
            fi
        done
        shortened+=("${parts[-1]}")
        echo "${shortened[*]}"
    }

    PS1=""
    PS1+="$(python_venv)"
    PS1+="$(user_host) "
    PS1+="\[${cyan}\]\$(shorten_path \"\$PWD\")\[${reset}\]"
    PS1+=" \$(parse_git_branch)"
    PS1+="> "

    export PS1
}

set_prompt
unset set_prompt