#!/bin/bash

killf() {
	echo "Usage: killf"
}

list_paths() {
	echo "Usage: list_paths"
}
# Create a new directory and enter it
md() {
	echo "Usage: md <directory_name>"
	mkdir -p "$@" && cd "$@" || exit
}

# Use `which` along with symlink resolving
whichlink() {
	echo "Usage: whichlink <command>"
	$(type -p greadlink readlink | head -1) -f $(which $@)
}

# git commit browser, needs fzf. Ctrl-m to view commit.
log() {
	echo "Usage: log"
	git log --graph --color=always \
		--format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
		fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
			--bind "ctrl-m:execute:
			echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
			xargs -I % sh -c 'git show --color=always % | less -R'"
}

server() {
	echo "Usage: server [port]"
	local port="${1:-8011}"
	python -m http.server "$port"
}

# Copy with progress
cp_p() {
	echo "Usage: cp_p <source> <destination>"
	rsync -WavP --human-readable --progress $1 $2
}

# Whois a domain or a URL
whois() {
	echo "Usage: whois <domain_or_url>"
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z "$domain" ]; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"
	/usr/bin/whois -h whois.internic.net "$domain" | sed '/NOTICE:/q'
}

# Preview CSV files
csvpreview() {
	echo "Usage: csvpreview <file>"
	sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}

# Extract archives
extract() {
	echo "Usage: extract <file>"
	if [ ! -f "$1" ]; then
		echo "'$1' is not a valid file"
		return 1
	fi

	local filename=$(basename "$1")
	local foldername="${filename%%.*}"
	local fullpath=$(perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1")
	local didfolderexist=false

	if [ -d "$foldername" ]; then
		didfolderexist=true
		read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
		echo
		if [[ $REPLY =~ ^[Nn]$ ]]; then
			return 1
		fi
	fi

	mkdir -p "$foldername" && cd "$foldername" || exit
	case $1 in
	*.tar.bz2 | *.tb2 | *.tbz | *.tbz2) tar xjf "$fullpath" ;;
	*.tar.gz | *.tgz | *.tar.Z | *.taz) tar xzf "$fullpath" ;;
	*.tar.xz | *.txz) tar Jxvf "$fullpath" ;;
	*.tar) tar xf "$fullpath" ;;
	*.zip) unzip "$fullpath" ;;
	*)
		echo "'$1' cannot be extracted via extract()"
		cd ..
		if [ "$didfolderexist" = false ]; then
			rm -r "$foldername"
		fi
		return 1
		;;
	esac
}

# Check who is using the laptop's iSight camera
camerausedby() {
	echo "Usage: camerausedby"
	echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
	usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
	echo -e "Recent camera uses:\n$usedby"
}

# Create animated GIFs from any video
gifify() {
	echo "Usage: gifify <input_movie.mov> [--good]"
	if [[ -n "$1" ]]; then
		if [[ $2 == '--good' ]]; then
			ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
			time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - >"$1.gif"
			rm -f out-static*.png
		else
			ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 >"$1.gif"
		fi
	else
		echo "Proper usage: gifify <input_movie.mov>. You DO need to include extension."
	fi
}

# Turn that video into webm
webmify() {
	echo "Usage: webmify <input_movie>"
	ffmpeg -i "$1" -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y "$1.webm"
}

# Direct it all to /dev/null
nullify() {
	echo "Usage: nullify <command>"
	"$@" >/dev/null 2>&1
}

# Convert file to data URI
todatauri() {
	echo "Usage: todatauri <file>"
	local M=$(file "$1" --mime-type | sed 's/^.*: //')
	local D=$(openssl base64 -in "$1" | tr -d '\n')
	echo "data:$M;base64,$D"
}

# Lazy initialize nvm
nvm() {
	echo "Usage: nvm <command>"
	unset -f nvm
	export NVM_DIR="$HOME/.nvm"
	. "$NVM_DIR/nvm.sh" --no-use
	nvm "${@}"
}

# Lazy initialize conda
conda() {
	echo "Usage: conda <command>"
	unset -f conda
	source <(~/miniconda3/bin/conda shell.bash hook)
	conda "${@}"
}

# Function to manage proxy settings
function proxy() {
	case "$1" in
	on)
		if [ -n "$2" ]; then
			# Set system proxy
			export http_proxy="http://$2:$3"
			export https_proxy="http://$2:$3"
			export HTTP_PROXY="http://$2:$3"
			export HTTPS_PROXY="http://$2:$3"
			echo "System Proxy enabled: $2:$3"

			# Set Git proxy
			git config --global http.proxy "http://$2:$3"
			git config --global https.proxy "http://$2:$3"
			echo "Git Proxy enabled: $2:$3"
		else
			echo "Usage: proxy on <host_ip> <port>"
		fi
		;;
	off)
		# Unset system proxy
		unset http_proxy
		unset https_proxy
		unset HTTP_PROXY
		unset HTTPS_PROXY
		echo "System Proxy disabled"

		# Unset Git proxy
		git config --global --unset http.proxy
		git config --global --unset https.proxy
		echo "Git Proxy disabled"
		;;
	status)
		# System proxy status
		if [ -n "$HTTP_PROXY" ]; then
			echo "HTTP System Proxy is set to $HTTP_PROXY"
		else
			echo "HTTP System Proxy is not set"
		fi
		if [ -n "$HTTPS_PROXY" ]; then
			echo "HTTPS System Proxy is set to $HTTPS_PROXY"
		else
			echo "HTTPS System Proxy is not set"
		fi

		# Git proxy status
		git_http_proxy=$(git config --global http.proxy)
		git_https_proxy=$(git config --global https.proxy)
		if [ -n "$git_http_proxy" ]; then
			echo "Git HTTP Proxy is set to $git_http_proxy"
		else
			echo "Git HTTP Proxy is not set"
		fi
		if [ -n "$git_https_proxy" ]; then
			echo "Git HTTPS Proxy is set to $git_https_proxy"
		else
			echo "Git HTTPS Proxy is not set"
		fi
		;;
	*)
		echo "Usage: proxy on|off|status [host_ip] [port]"
		;;
	esac
}

function gateway_ip() {
	ip route show | grep -i default | awk '{print $3}'
}

function local_ip() {
	hostname -I | awk '{print $1}'
}

dockal() {
	# Check if correct number of arguments is passed
	if [ $# -eq 0 ]; then
		echo "Usage:  dockal COMMAND"
		echo "Common Commands:"
		echo "  images       List private docker registry images"
		echo "  info         Display private docker registry information"
		echo "  push         Download an image from local registry & tag & untag origin"
		echo "  pull         Tag & upload an image to a registry & untag"
		echo "  setrepo      Set private docker registry(ip and port) & add to insecure registry"
		return 1
	fi

	# Set default registry
	registry=${DOCKER_PRIVATE_REGISTRY:-"172.16.23.60:5000"}

	case "$1" in
	images)
		echo "Listing images in private docker registry..."
		curl -X GET "http://$registry/v2/_catalog" | jq '.repositories[]'
		;;
	info)
		echo "Displaying private docker registry information..."
		curl -X GET "http://$registry/v2/"
		;;
	push)
		if [ $# -lt 2 ]; then
			echo "Usage: dockal push IMAGE"
			return 1
		fi
		image=$2
		echo "Pulling image $image from local registry..."
		docker pull $image
		echo "Tagging image $image..."
		docker tag $image $registry/$image
		echo "Pushing image to private registry..."
		docker push $registry/$image
		echo "Untagging original image $image..."
		docker rmi $registry/$image
		;;
	pull)
		if [ $# -lt 2 ]; then
			echo "Usage: dockal pull IMAGE"
			return 1
		fi
		image=$2
		echo "Pulling image $image from private registry..."
		docker pull $registry/$image
		echo "Tagging image $image..."
		docker tag $registry/$image $image
		echo "Untagging private registry image $image..."
		docker rmi $registry/$image
		;;
	setrepo)
		if [ $# -lt 2 ]; then
			echo "Usage: dockal setrepo REPO"
			return 1
		fi
		repo=$2
		echo "Setting private docker registry to $repo..."
		export DOCKER_PRIVATE_REGISTRY=$repo
		echo "Adding $repo to insecure registries..."
		export DOCKER_OPTS="${DOCKER_OPTS} --insecure-registry $repo"
		;;
	*)
		echo "Unsupported arguments."
		;;
	esac
}
